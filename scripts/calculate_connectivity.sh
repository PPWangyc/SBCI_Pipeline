#!/bin/bash

SCRIPT_PATH=/scratch/mcole22/sbc_pipeline/gitrepo/SBCI/scripts

SIZE=${1}
SCDIR=${2}
FCDIR=${3}
OUTPUTDIR=${4}

mkdir -p ${OUTPUTDIR}

##########################################################################
# MESH SCRIPTS, MUST BE RUN FIRST                                        #
##########################################################################

cd $SCDIR

# Step1) Downsample the white matter mesh to the required resolution
python ${SCRIPT_PATH}/downsample_surface.py \
       --surface out_surf/lh_white_s2w2.vtk \
       --output ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --reduction ${SIZE} -f

python ${SCRIPT_PATH}/downsample_surface.py \
       --surface out_surf/rh_white_s2w2.vtk \
       --output ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --reduction ${SIZE} -f

# Step2) Validate downsampled mesh
python ${SCRIPT_PATH}/mesh_validation.py \
       --lh_surface_hi out_surf/lh_white_s2w2.vtk \
       --lh_surface_lo ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --rh_surface_hi out_surf/rh_white_s2w2.vtk \
       --rh_surface_lo ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --output ${OUTPUTDIR}/validation_${SIZE}.npz -f

# Step3) Generate a discrete mapping from the full resolution mesh to the downsampled mesh
python ${SCRIPT_PATH}/map_surfaces.py \
       --lh_surface_hi out_surf/lh_white_s2w2.vtk \
       --lh_surface_lo ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --rh_surface_hi out_surf/rh_white_s2w2.vtk \
       --rh_surface_lo ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --output ${OUTPUTDIR}/mapping_${SIZE}.npz -f

# Step4) Calculate atlas' for the downsampled mesh
python ${SCRIPT_PATH}/group_roi_vertices.py \
       --lh_annot ../structure/t1_freesurfer/label/lh.aparc.annot \
       --rh_annot ../structure/t1_freesurfer/label/rh.aparc.annot \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --output ${OUTPUTDIR}/desikan_roi_${SIZE}.npz -f
 
python ${SCRIPT_PATH}/group_roi_vertices.py \
       --lh_annot ../structure/t1_freesurfer/label/lh.aparc.a2009s.annot \
       --rh_annot ../structure/t1_freesurfer/label/rh.aparc.a2009s.annot \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --output ${OUTPUTDIR}/destrieux_roi_${SIZE}.npz -f

##########################################################################
# STRUCTURAL SCRIPTS, CAN BE RUN WITH FUNCTIONAL SCRIPTS SIMULTAINIOUSLY #
##########################################################################

# Step1) Snap fiber endpoints generated by SET to the nearest vertices on the full resolution mesh
python ${SCRIPT_PATH}/snap_fibers.py \
       --surfaces out_surf/lh_white_s2w2.vtk \
                  out_surf/rh_white_s2w2.vtk \
                  preprocess/lh_pial_lps.vtk \
                  preprocess/rh_pial_lps.vtk \
                  preprocess/gray_nuclei.vtk \
                  preprocess/brainstem.vtk \
       --intersections intersections_pft_3000k.npz \
       --output ${OUTPUTDIR}/snapped_fibers_${SIZE}.npz -f
 
# Step2) Calculate SC matrix
python ${SCRIPT_PATH}/calculate_sc.py \
       --intersections ${OUTPUTDIR}/snapped_fibers_${SIZE}.npz \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --output ${OUTPUTDIR}/sc_${SIZE}.npz -f
 
# Step3) Calculate SC density
python ${SCRIPT_PATH}/calculate_density.py \
       --lh_surface ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --rh_surface ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --intersections ${OUTPUTDIR}/snapped_fibers_${SIZE}.npz \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --epsilon 0.05 \
       --output ${OUTPUTDIR}/density_${SIZE}.npz -f
 
##########################################################################
# FUNCTIONAL SCRIPTS, CAN BE RUN WITH STRUCTURAL SCRIPTS SIMULTAINIOUSLY #
##########################################################################

cd $FCDIR

# Step1) Calculate FC (no confounders)
python ${SCRIPT_PATH}/calculate_residual_timeseries.py \
       --lh_time_series ./fmcpr.sdf.sm5.self.lh.nii.gz \
       --rh_time_series ./fmcpr.sdf.sm5.self.rh.nii.gz \
       --output ${OUTPUTDIR}/fc_ts_${SIZE}.npz -f

python ${SCRIPT_PATH}/calculate_fc.py \
       --time_series ${OUTPUTDIR}/fc_ts_${SIZE}.npz \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --output ${OUTPUTDIR}/fc_${SIZE}.npz -f

# Step2) Calculate FC (wm, motion, vcsf confounders)
python ${SCRIPT_PATH}/calculate_residual_timeseries.py \
       --lh_time_series ./fmcpr.sdf.sm5.self.lh.nii.gz \
       --rh_time_series ./fmcpr.sdf.sm5.self.rh.nii.gz \
       --motion ./fmcpr.mcdat \
       --wm ./wm.dat \
       --vcsf ./vcsf.dat \
       --output ${OUTPUTDIR}/fc_ts_partial_${SIZE}.npz -f

python ${SCRIPT_PATH}/calculate_fc.py \
       --time_series ${OUTPUTDIR}/fc_ts_partial_${SIZE}.npz \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --output ${OUTPUTDIR}/fc_partial_${SIZE}.npz -f

# Step3) Calculate FC (wm, motion, vcsf, gsl confounders)
python ${SCRIPT_PATH}/calculate_residual_timeseries.py \
       --lh_time_series ./fmcpr.sdf.sm5.self.lh.nii.gz \
       --rh_time_series ./fmcpr.sdf.sm5.self.rh.nii.gz \
       --motion ./fmcpr.mcdat \
       --wm ./wm.dat \
       --vcsf ./vcsf.dat \
       --gsl ./global.waveform.dat \
       --output ${OUTPUTDIR}/fc_ts_partial_gsl_${SIZE}.npz -f

python ${SCRIPT_PATH}/calculate_fc.py \
       --time_series ${OUTPUTDIR}/fc_ts_partial_gsl_${SIZE}.npz \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --output ${OUTPUTDIR}/fc_partial_gsl_${SIZE}.npz -f

# Step4) Calculate masks for vertices within an epsilon mm radius of each other vertex
python ${SCRIPT_PATH}/calculate_dst_mask.py \
       --lh_surface ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --rh_surface ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --epsilon 5 \
       --output ${OUTPUTDIR}/mask_${SIZE}_5mm.npz -f

python ${SCRIPT_PATH}/calculate_dst_mask.py \
       --lh_surface ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --rh_surface ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --epsilon 10 \
       --output ${OUTPUTDIR}/mask_${SIZE}_10mm.npz -f

python ${SCRIPT_PATH}/calculate_dst_mask.py \
       --lh_surface ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --rh_surface ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --epsilon 15 \
       --output ${OUTPUTDIR}/mask_${SIZE}_15mm.npz -f

python ${SCRIPT_PATH}/calculate_dst_mask.py \
       --lh_surface ${OUTPUTDIR}/lh_white_${SIZE}.vtk \
       --rh_surface ${OUTPUTDIR}/rh_white_${SIZE}.vtk \
       --mesh ${OUTPUTDIR}/mapping_${SIZE}.npz \
       --epsilon 20 \
       --output ${OUTPUTDIR}/mask_${SIZE}_20mm.npz -f
